<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd"
	default-lazy-init="true">

	<!-- Properties 位置 -->
	<bean id="placeholderConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config.properties" />
	</bean>

	<!-- 自动扫描包，可以写多个 -->
	<context:component-scan base-package="org.cweili.*.*,org.cweili.*.*.*" />

	<!-- 多视图处理器 -->
	<bean class="org.cweili.wray.util.MixedViewResolver">
		<property name="resolvers">
			<map>
				<entry key="jsp">
					<bean
						class="org.springframework.web.servlet.view.InternalResourceViewResolver">
						<property name="prefix" value="/WEB-INF/jsp/" />
						<property name="viewClass"
							value="org.springframework.web.servlet.view.JstlView" />
					</bean>
				</entry>
				<entry key="ftl">
					<bean
						class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
						<property name="cache" value="true" />
						<property name="contentType" value="text/html;charset=UTF-8"></property>
						<property name="exposeSpringMacroHelpers" value="true" />
						<property name="viewClass"
							value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
						<property name="requestContextAttribute" value="rc" />
					</bean>
				</entry>
			</map>
		</property>
	</bean>

	<!-- freemarker 配置 -->
	<bean id="freeMarkerConfigurer"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/skin/" />
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">5</prop>
				<prop key="default_encoding">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
			</props>
		</property>
	</bean>

	<!-- 注解请求映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />

	<!-- SpringMVC 转换器 -->
	<bean id="bufferedImage_hmc"
		class="org.springframework.http.converter.BufferedImageHttpMessageConverter">
		<property name="defaultContentType">
			<bean class="org.springframework.http.MediaType">
				<constructor-arg index="0" value="image" />
				<constructor-arg index="1" value="gif" />
			</bean>
		</property>
	</bean>
	<bean id="byteArray_hmc"
		class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
	<bean id="string_hmc"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<bean class="org.springframework.http.MediaType">
					<constructor-arg index="0" value="text" />
					<constructor-arg index="1" value="plain" />
					<constructor-arg index="2" value="UTF-8" />
				</bean>
				<bean class="org.springframework.http.MediaType">
					<constructor-arg index="0" value="text" />
					<constructor-arg index="1" value="html" />
					<constructor-arg index="2" value="UTF-8" />
				</bean>
				<bean class="org.springframework.http.MediaType">
					<constructor-arg index="0" value="application" />
					<constructor-arg index="1" value="json" />
					<constructor-arg index="2" value="UTF-8" />
				</bean>
				<bean class="org.springframework.http.MediaType">
					<constructor-arg index="0" value="*" />
					<constructor-arg index="1" value="*" />
					<constructor-arg index="2" value="UTF-8" />
				</bean>
			</list>
		</property>
	</bean>
	<bean id="resource_hmc"
		class="org.springframework.http.converter.ResourceHttpMessageConverter" />

	<!--
	<bean id="jackson2_hmc"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<bean class="org.springframework.http.MediaType">
					<constructor-arg index="0" value="application" />
					<constructor-arg index="1" value="json" />
					<constructor-arg index="2" value="UTF-8" />
				</bean>
			</list>
		</property>
	</bean>
	-->

	<bean id="jaxb2Collection_hmc"
		class="org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter" />
	<bean id="jaxb2RootElement_hmc"
		class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" />
	<bean id="source_hmc"
		class="org.springframework.http.converter.xml.SourceHttpMessageConverter" />

	<bean id="allEncompassingForm_hmc"
		class="org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter" />

	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="bufferedImage_hmc" />
				<ref bean="byteArray_hmc" />
				<ref bean="string_hmc" />
				<ref bean="resource_hmc" />
				<!-- ref bean="jackson2_hmc"/ -->
				<ref bean="jaxb2Collection_hmc" />
				<ref bean="jaxb2RootElement_hmc" />
				<ref bean="source_hmc" />
				<ref bean="allEncompassingForm_hmc" />
			</list>
		</property>
	</bean>

	<!-- Multipart 处理 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="268435456" />
		<property name="maxInMemorySize" value="4096" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="resolveLazily" value="true" />
	</bean>

	<!-- 总错误处理 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException">
					forward:/error/MaxUploadSizeExceeded
				</prop>
			</props>
		</property>
		<property name="defaultErrorView" value="forward:/error" />
		<property name="defaultStatusCode" value="200" />
		<property name="warnLogCategory"
			value="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" />
	</bean>

	<!-- SpringMVC 拦截器 -->
	<bean name="authenticationInterceptor" class="org.cweili.wray.interceptor.AuthenticationInterceptor"
		scope="prototype" />
	<bean name="pageProcessingInterceptor" class="org.cweili.wray.interceptor.PageProcessingInterceptor"
		scope="prototype" />
	<bean name="initInterceptor" class="org.cweili.wray.interceptor.InitInterceptor"
		scope="prototype" />

	<mvc:interceptors>
		<!-- This will intercept all URIs -->
		<ref bean="initInterceptor" />
		<ref bean="pageProcessingInterceptor" />
		<!-- This will apply interceptor to only certain URIs -->
		<mvc:interceptor>
			<mvc:mapping path="/admin-*" />
			<mvc:exclude-mapping path="/admin-login" />
			<ref bean="authenticationInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 允许对静态资源文件的访问 -->
	<!-- mvc:resources location="/" mapping="#{}" cache-period="31536000"/ -->
	<!-- 给ResourceHttpRequestHandler配置了Resource位置，这样handler就可以处理一个特殊的URL模式对应的静态资源请求。 
		它提供了一个很方便的方法直接从物理路径访问到静态资源，包括web应用的root路径和classpath上的路径。cache-period属性可以被用来设置未来可能会用上的实验性的header -->
	<mvc:resources location="/res" mapping="/res"
		cache-period="31536000" />
	<mvc:resources location="/skin" mapping="/skin"
		cache-period="31536000" />
	<mvc:default-servlet-handler />

	<!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring 
		bean对象 -->
	<!-- bean class="com.xxxxx.SpringContextHolder" lazy-init="false" / -->

</beans>